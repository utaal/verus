name: ci

on:
  push:
    branches:
      - 'binary-releases'

  workflow_dispatch:

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  fmt:
    runs-on: macos-14
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup rust
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
      - name: setup verusfmt
        run: |
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/verus-lang/verusfmt/releases/latest/download/verusfmt-installer.sh | sh
      - name: check rustfmt/verusfmt
        working-directory: ./source
        run: |
          . ../tools/activate
          vargo fmt -- --check
      - name: check cargo fmt for vargo
        working-directory: ./tools/vargo
        run: |
          cargo fmt -- --check

  test-and-release-macos:
    runs-on: macos-14
    strategy:
      matrix:
        features: ['', 'singular'] # TODO ['record-history', 'no-std', 'no-alloc'] # TODO ['singular']
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: get z3
        working-directory: ./source
        run: |
          ./tools/get-z3.sh
          echo z3 version `./z3 --version`
      - name: setup rust
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
      - name: setup singular
        if: matrix.features == 'singular'
        run: |
          curl -LO https://www.singular.uni-kl.de/ftp/pub/Math/Singular/UNIX/Singular-4-4-0_M1.dmg
          hdiutil attach Singular-4-4-0_M1.dmg
      - name: build and test
        working-directory: ./source
        run: |
          . ../tools/activate
          vargo clean

          case "${{ matrix.features }}" in
            "singular")
              vargo build --features singular
              DYLD_LIBRARY_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/lib VERUS_SINGULAR_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/bin/Singular vargo test -p air --features singular
              DYLD_LIBRARY_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/lib VERUS_SINGULAR_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/bin/Singular vargo test -p rust_verify_test --features singular --test integer_ring
              DYLD_LIBRARY_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/lib VERUS_SINGULAR_PATH=/Volumes/Singular4.4.0/Singular.app/Contents/bin/Singular vargo test -p rust_verify_test --features singular --test examples -- example_integer_ring
              ;;
            "record-history")
              vargo build --features record-history
              VERUS_Z3_PATH="$(pwd)/z3" vargo test -p rust_verify_test --features record-history --test basic
              ;;
            "no-std")
              vargo build --vstd-no-std
              cd vstd
              unset -f cargo
              cargo build --no-default-features --features alloc
              ;;
            "no-alloc")
              vargo build --vstd-no-std --vstd-no-alloc
              cd vstd
              unset -f cargo
              cargo build --no-default-features
              ;;
            *)
              # VERUS_Z3_PATH="$(pwd)/z3" vargo test -p air
              # VERUS_Z3_PATH="$(pwd)/z3" vargo test -p rust_verify_test
              cd vstd
              unset -f cargo
              cargo build
              ;;
          esac
      - name: build verus release
        if: matrix.features == ''
        working-directory: ./source
        run: |
          . ../tools/activate
          vargo clean
          vargo build --release
          ./target-verus/release/verus --version --output-json > ./target-verus/release/version.json
      - name: upload verus release artifact
        uses: actions/upload-artifact@v4
        if: matrix.features == ''
        with:
            name: verus-arm64-macos
            path: source/target-verus/release
      - name: build docs
        if: matrix.features == ''
        working-directory: ./source
        run: |
          ./tools/docs.sh
      - name: upload verusdoc artifact
        uses: actions/upload-artifact@v4
        if: matrix.features == ''
        with:
          name: verusdoc
          path: source/doc

  smoke-test-and-release-windows:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: get z3
        shell: pwsh
        working-directory: .\source
        run: |
          .\tools\get-z3.ps1
          Write-Host "z3 version $(.\z3.exe --version)"
      - name: setup rust
        run: |
          # Disable the download progress bar which can cause perf issues
          $ProgressPreference = "SilentlyContinue"
          Invoke-WebRequest https://win.rustup.rs/ -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-host=x86_64-pc-windows-msvc --default-toolchain=none
          del rustup-init.exe
        shell: powershell
      - name: build and test
        working-directory: .\source
        run: |
          ../tools/activate.ps1
          vargo clean
          # vargo build
          # $env:VERUS_Z3_PATH = "$(Get-Location)/z3"; vargo test -p rust_verify_test --test basic
          # $env:VERUS_Z3_PATH = "$(Get-Location)/z3"; vargo test -p rust_verify_test --test layout
        shell: powershell
      - name: build verus release
        working-directory: .\source
        run: |
          ../tools/activate.ps1
          $env:VERUS_Z3_PATH = "$(Get-Location)/z3"; vargo build --release
          # $env:VERUS_Z3_PATH = "$(Get-Location)/z3"; ./target-verus/release/verus.exe --version --output-json > ./target-verus/release/version.json
        shell: powershell
      - name: upload verus release artifact
        uses: actions/upload-artifact@v4
        with:
            name: verus-x86-win
            path: source/target-verus/release

  smoke-test-and-release-linux:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: get z3
        working-directory: ./source
        run: |
          ./tools/get-z3.sh
          echo z3 version `./z3 --version`
      - name: setup rust
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
      - name: build and test
        working-directory: ./source
        run: |
          . ../tools/activate
          vargo clean
          # vargo build
          # VERUS_Z3_PATH="$(pwd)/z3" vargo test -p rust_verify_test --test basic
      - name: build verus release
        working-directory: ./source
        run: |
          . ../tools/activate
          vargo clean
          vargo build --release
          # ./target-verus/release/verus --version --output-json > ./target-verus/release/version.json
      - name: upload verus release artifact
        uses: actions/upload-artifact@v4
        with:
            name: verus-x86-linux
            path: source/target-verus/release

  release:
    needs: [fmt, smoke-test-and-release-linux, smoke-test-and-release-windows, test-and-release-macos]
    runs-on: ubuntu-latest
    steps:
      - name: download all artifacts
        uses: actions/download-artifact@v4

      - name: create release tag
        shell: bash
        run: echo "TAG_NAME=$(cat ./verus-x86-linux/version.txt)" >> $GITHUB_ENV

      - name: create release
        id: create_release
        uses: viperproject/create-nightly-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Rolling Release ${{ env.TAG_NAME }}
          keep_num: 4
        
      - name: list artifacts
        run: ls -R

      # - name: upload release for linux
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./prusti-release-ubuntu-20.04/release.zip
      #     asset_name: prusti-release-ubuntu.zip
      #     asset_content_type: application/zip

      # - name: Upload release asset for Windows
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./prusti-release-windows-latest/release.zip
      #     asset_name: prusti-release-windows.zip
      #     asset_content_type: application/zip

      # # This asset is only for backward compatibility with Prusti-Assistant. After updating
      # # Prusti-Assistant to use the new asset name, we can wait a while and then delete this.
      # - name: Upload release asset for macOS x86 using a backward-compatibile name
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./prusti-release-macos-13/release.zip
      #     asset_name: prusti-release-macos.zip
      #     asset_content_type: application/zip

      # - name: Upload release asset for macOS x86
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./prusti-release-macos-13/release.zip
      #     asset_name: prusti-release-macos-x86.zip
      #     asset_content_type: application/zip

      # - name: Upload release asset for macOS arm64
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./prusti-release-macos-14/release.zip
      #     asset_name: prusti-release-macos-arm64.zip
      #     asset_content_type: application/zip